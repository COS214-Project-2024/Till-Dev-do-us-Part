/**
 * @file WaterSupply.cpp
 * @brief Implements the WaterSupply class methods for managing water production.
 */

#include "WaterSupply.h"
#include <iostream>

/**
 * @brief Constructs a WaterSupply with specified parameters.
 * @param name Name of the water supply
 * @param department Pointer to the Resource Department
 * @param resource Pointer to the Water resource
 * @param numworkers Number of workers for the water supply
 */
WaterSupply::WaterSupply(std::string name, ResourceDepartment *department, Water *resource, int numworkers)
    : ProductionUtility(name, department, resource, numworkers)
{
    productionCapacity = 5000;
    currentProduction = 0;
    setProState(new OperationalProductionState);
    
    // Initialize UtilityBus with Wellness instance
    UtilityBus = new Wellness(name, numworkers);
    
    // Hire employees for the utility
    for (int i = 0; i < numworkers; i++) // Fixed to use < instead of <= for correct hiring
    {
        UtilityBus->hireEmployee();
    }
    
    ActiveWorkers = UtilityBus->activelyWorking(); // Get active worker count
    proState->handleProduction(this); // Handle initial production state
    getStatus(); // Display status after initialization
}

/**
 * @brief Default destructor for WaterSupply.
 */
WaterSupply::~WaterSupply() {}

/**
 * @brief Starts the water production process.
 */
void WaterSupply::startProduction()
{
    std::cout << "\n--- Starting Production Cycle ---" << std::endl;

    // Step 1: Check for potential breakdowns
    std::cout << "Checking for potential breakdowns..." << std::endl;
    checkForBreakdowns();
    std::this_thread::sleep_for(std::chrono::seconds(1)); // Pause to simulate checking time

    // Step 2: Handle Production based on state
    if (proState)
    {
        if (proState->getStateName() == "Operational")
        {
            std::cout << "No breakdowns detected. Production running normally." << std::endl;
            proState->handleProduction(this); // Continue production if operational
        }
        else if (proState->getStateName() == "Maintenance")
        {
            std::cout << "Breakdown detected! " << getName() << " is now in Maintenance State. Production halted.\n";
        }
    }

    // End of single production cycle
    std::cout << "--- End of Production Cycle ---\n" << std::endl;
}

/**
 * @brief Gets the product generated by the water supply.
 * @return The name of the product
 */
std::string WaterSupply::getProduct() const
{
    return "water";
}
